[{"body":"Welcome to the Compose theme user guide! This guide shows you how to get started creating technical documentation sites using Compose, including site customization and how to use Compose's blocks and templates.\nGet started now ","link":"https://omnigram.nexptr.com/zh/api/example/","section":"api","title":"Compose Docs"},{"body":"Omnigram Server 是Omnigram的后端服务。提供基本的用户管理，电子书搜刮，个人阅读进度等功能。同时提供对LLama，bark等模型的使用接口用于「碎念」和「听书」两个重要的功能后台。当然用户也可以自行修改使用三方的服务，如chatgpt等。 API 相关文档.\nTODO\nBack to docs ","link":"https://omnigram.nexptr.com/zh/api/","section":"api","title":"Omnigram-server API Docs"},{"body":"Mermaid is library that helps you generate diagrams, flowcharts, and piecharts from text in a similar manner as markdown.\nWith compose theme, you can use mermaid using a custom shortcode as follows:\nSequence Diagrams Syntax\n1{{\u0026lt; mermaid \u0026gt;}} 2sequenceDiagram 3 participant Alice 4 participant Bob 5 Alice-\u0026gt;\u0026gt;John: Hello John, how are you? 6 loop Healthcheck 7 John-\u0026gt;\u0026gt;John: Fight against hypochondria 8 end 9 Note right of John: Rational thoughts\u0026lt;br/\u0026gt;prevail... 10 John--\u0026gt;\u0026gt;Alice: Great! 11 John-\u0026gt;\u0026gt;Bob: How about you? 12 Bob--\u0026gt;\u0026gt;John: Jolly good! 13{{\u0026lt; /mermaid \u0026gt;}} Result\nsequenceDiagram participant Alice participant Bob Alice-\u003e\u003eJohn: Hello John, how are you? loop Healthcheck John-\u003e\u003eJohn: Fight against hypochondria end Note right of John: Rational thoughtsprevail... John--\u003e\u003eAlice: Great! John-\u003e\u003eBob: How about you? Bob--\u003e\u003eJohn: Jolly good! Flow Charts Syntax\n1{{\u0026lt; mermaid \u0026gt;}} 2flowchart TB 3 c1--\u0026gt;a2 4 subgraph one 5 a1--\u0026gt;a2 6 end 7 subgraph two 8 b1--\u0026gt;b2 9 end 10 subgraph three 11 c1--\u0026gt;c2 12 end 13 one --\u0026gt; two 14 three --\u0026gt; two 15 two --\u0026gt; c2 16{{\u0026lt; /mermaid \u0026gt;}} Result\nflowchart TB c1--\u003ea2 subgraph one a1--\u003ea2 end subgraph two b1--\u003eb2 end subgraph three c1--\u003ec2 end one --\u003e two three --\u003e two two --\u003e c2 Graphs Syntax\n1{{\u0026lt; mermaid \u0026gt;}} 2graph TB 3 sq[Square shape] --\u0026gt; ci((Circle shape)) 4 5 subgraph A 6 od\u0026gt;Odd shape]-- Two line\u0026lt;br/\u0026gt;edge comment --\u0026gt; ro 7 di{Diamond with \u0026lt;br/\u0026gt; line break} -.-\u0026gt; ro(Rounded\u0026lt;br\u0026gt;square\u0026lt;br\u0026gt;shape) 8 di==\u0026gt;ro2(Rounded square shape) 9 end 10 11 %% Notice that no text in shape are added here instead that is appended further down 12 e --\u0026gt; od3\u0026gt;Really long text with linebreak\u0026lt;br\u0026gt;in an Odd shape] 13 14 %% Comments after double percent signs 15 e((Inner / circle\u0026lt;br\u0026gt;and some odd \u0026lt;br\u0026gt;special characters)) --\u0026gt; f(,.?!+-*ز) 16 17 cyr[Cyrillic]--\u0026gt;cyr2((Circle shape Начало)); 18 19 classDef green fill:#9f6,stroke:#333,stroke-width:2px; 20 classDef orange fill:#f96,stroke:#333,stroke-width:4px; 21 class sq,e green 22 class di orange 23{{\u0026lt; /mermaid \u0026gt;}} Result\ngraph TB sq[Square shape] --\u003e ci((Circle shape)) subgraph A od\u003eOdd shape]-- Two lineedge comment --\u003e ro di{Diamond with line break} -.-\u003e ro(Rounded\nsquare\nshape) di==\u003ero2(Rounded square shape) end %% Notice that no text in shape are added here instead that is appended further down e --\u003e od3\u003eReally long text with linebreak\nin an Odd shape] %% Comments after double percent signs e((Inner / circle\nand some odd special characters)) --\u003e f(,.?!+-*ز) cyr[Cyrillic]--\u003ecyr2((Circle shape Начало)); classDef green fill:#9f6,stroke:#333,stroke-width:2px; classDef orange fill:#f96,stroke:#333,stroke-width:4px; class sq,e green class di orange Syntax\n1{{\u0026lt; mermaid \u0026gt;}} 2graph LR 3 A[Hard edge] --\u0026gt;|Link text| B(Round edge) 4 B --\u0026gt; C{Decision} 5 C --\u0026gt;|One| D[Result one] 6 C --\u0026gt;|Two| E[Result two] 7{{\u0026lt; /mermaid \u0026gt;}} Result\ngraph LR A[Hard edge] --\u003e|Link text| B(Round edge) B --\u003e C{Decision} C --\u003e|One| D[Result one] C --\u003e|Two| E[Result two] Class Diagram classDiagram Animal \u003c|-- Duck Animal \u003c|-- Fish Animal \u003c|-- Zebra Animal : +int age Animal : +String gender Animal: +isMammal() Animal: +mate() class Duck{ +String beakColor +swim() +quack() } class Fish{ -int sizeInFeet -canEat() } class Zebra{ +bool is_wild +run() } State Diagram stateDiagram-v2 [*] --\u003e Active state Active { [*] --\u003e NumLockOff NumLockOff --\u003e NumLockOn : EvNumLockPressed NumLockOn --\u003e NumLockOff : EvNumLockPressed -- [*] --\u003e CapsLockOff CapsLockOff --\u003e CapsLockOn : EvCapsLockPressed CapsLockOn --\u003e CapsLockOff : EvCapsLockPressed -- [*] --\u003e ScrollLockOff ScrollLockOff --\u003e ScrollLockOn : EvScrollLockPressed ScrollLockOn --\u003e ScrollLockOff : EvScrollLockPressed } stateDiagram-v2 State1: The state with a note note right of State1 Important information! You can write notes. end note State1 --\u003e State2 note left of State2 : This is the note to the left. Relationship Diagrams Syntax\n1{{\u0026lt; mermaid \u0026gt;}} 2erDiagram 3 CUSTOMER ||--o{ ORDER : places 4 ORDER ||--|{ LINE-ITEM : contains 5 CUSTOMER }|..|{ DELIVERY-ADDRESS : uses 6{{\u0026lt; /mermaid \u0026gt;}} Result\nerDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses User Journey Syntax\n1{{\u0026lt; mermaid \u0026gt;}} 2journey 3 title My working day 4 section Go to work 5 Make tea: 5: Me 6 Go upstairs: 3: Me 7 Do work: 1: Me, Cat 8 section Go home 9 Go downstairs: 5: Me 10 Sit down: 5: Me 11{{\u0026lt; /mermaid \u0026gt;}} Result\njourney title My working day section Go to work Make tea: 5: Me Go upstairs: 3: Me Do work: 1: Me, Cat section Go home Go downstairs: 5: Me Sit down: 5: Me Gantt Syntax\n1{{\u0026lt; mermaid \u0026gt;}} 2gantt 3 dateFormat YYYY-MM-DD 4 title Adding GANTT diagram functionality to mermaid 5 excludes weekends 6 %% (`excludes` accepts specific dates in YYYY-MM-DD format, days of the week (\u0026#34;sunday\u0026#34;) or \u0026#34;weekends\u0026#34;, but not the word \u0026#34;weekdays\u0026#34;.) 7 8 section A section 9 Completed task :done, des1, 2014-01-06,2014-01-08 10 Active task :active, des2, 2014-01-09, 3d 11 Future task : des3, after des2, 5d 12 Future task2 : des4, after des3, 5d 13 14 section Critical tasks 15 Completed task in the critical line :crit, done, 2014-01-06,24h 16 Implement parser and jison :crit, done, after des1, 2d 17 Create tests for parser :crit, active, 3d 18 Future task in critical line :crit, 5d 19 Create tests for renderer :2d 20 Add to mermaid :1d 21 22 section Documentation 23 Describe gantt syntax :active, a1, after des1, 3d 24 Add gantt diagram to demo page :after a1 , 20h 25 Add another diagram to demo page :doc1, after a1 , 48h 26 27 section Last section 28 Describe gantt syntax :after doc1, 3d 29 Add gantt diagram to demo page :20h 30 Add another diagram to demo page :48h 31{{\u0026lt; /mermaid \u0026gt;}} Result\ngantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid excludes weekends %% (`excludes` accepts specific dates in YYYY-MM-DD format, days of the week (\"sunday\") or \"weekends\", but not the word \"weekdays\".) section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to mermaid :1d section Documentation Describe gantt syntax :active, a1, after des1, 3d Add gantt diagram to demo page :after a1 , 20h Add another diagram to demo page :doc1, after a1 , 48h section Last section Describe gantt syntax :after doc1, 3d Add gantt diagram to demo page :20h Add another diagram to demo page :48h Pie Chart 1{{\u0026lt; mermaid \u0026gt;}} 2pie 3 title Key elements in Product X 4 \u0026#34;Calcium\u0026#34; : 42.96 5 \u0026#34;Potassium\u0026#34; : 50.05 6 \u0026#34;Magnesium\u0026#34; : 10.01 7 \u0026#34;Iron\u0026#34; : 5 8{{\u0026lt; /mermaid \u0026gt;}} Result\npie title Key elements in Product X \"Calcium\" : 42.96 \"Potassium\" : 50.05 \"Magnesium\" : 10.01 \"Iron\" : 5 ","link":"https://omnigram.nexptr.com/zh/api/example/mermaid/","section":"api","title":"Mermaid"},{"body":"Hugo Clarity is a technology-minded theme for Hugo based on VMware's open-source Clarity Design System featuring rich code support, dark/light mode, mobile support, and much more. See a live demo at neonmirrors.net.\nGet started with Clarity ","link":"https://omnigram.nexptr.com/zh/docs/overview/","section":"docs","title":"概览"},{"body":"Prerequisites Firstly, ensure you have installed the extended version of Hugo. See installation steps from Hugo's official docs.\nGetting up and running Read the prerequisites above and verify you're using the extended version of Hugo. There are at least two ways of quickly getting started with Hugo and the VMware Clarity theme:\nOption 1 (recommended) Generate a new Hugo site and add this theme as a Git submodule inside your themes folder:\n1hugo new site yourSiteName 2cd yourSiteName 3git init 4git submodule add https://github.com/chipzoller/hugo-clarity themes/hugo-clarity 5cp -a themes/hugo-clarity/exampleSite/* . Then run\n1hugo server Hurray!\nOption 2 (Great for testing quickly) You can run your site directly from the exampleSite. To do so, use the following commands:\n1git clone https://github.com/chipzoller/hugo-clarity 2cd hugo-clarity/exampleSite/ 3hugo server --themesDir ../.. Although, option 2 is great for quick testing, it is somewhat problematic when you want to update your theme. You would need to be careful not to overwrite your changes.\nOption 3 (The new, most fun \u0026amp; painless approach) This option enables you to load this theme as a hugo module. It arguably requires the least effort to run and maintain in your website.\nFirst things first, ensure you have go binary installed on your machine.\n1git clone https://github.com/chipzoller/hugo-clarity.git clarity 2cd clarity/exampleSite/ 3hugo mod init my-site Open config.toml file in your code editor, replace theme = \u0026quot;hugo-clarity\u0026quot; with theme = [\u0026quot;github.com/chipzoller/hugo-clarity\u0026quot;] or just theme = \u0026quot;github.com/chipzoller/hugo-clarity\u0026quot;.\nHurray you can now run\n1hugo server To pull in theme updates, run hugo mod get -u ./... from the theme folder. If unsure, learn how to update hugo modules\nThere is more you could do with hugo modules, but this will suffice for our use case here.\n","link":"https://omnigram.nexptr.com/zh/docs/overview/getting-started/","section":"docs","title":"Getting started"},{"body":" Blog with tagging and category options\nDeeplinks\nNative Image Lazy Loading\nCustomizable (see config)\nDark Mode (with UI controls for user preference setting)\nToggleable table of contents\nFlexible image configuration\nLogo alignment\nMobile support with configurable menu alignment\nSyntax Highlighting\nRich code block functions including:\nCopy to clipboard Toggle line wrap (dynamic) Toggle line numbers Language label Toggle block expansion/contraction (dynamic) To put it all in context, here is a preview showing all functionality.\n","link":"https://omnigram.nexptr.com/zh/docs/overview/features/","section":"docs","title":"Features"},{"body":"Configuration If set, jump over to the config.toml file and start configuring your site.\nThis section will mainly cover settings that are unique to this theme. If something is not covered here (or elsewhere in this file), there's a good chance it is covered in this Hugo docs page.\nGlobal Parameters These options set global values that some pages or all pages in the site use by default.\nParameter Value Type Overidable on Page author string no twitter string no largeTwitterCard boolean no ga_analytics string no description string yes introDescription string no numberOfTagsShown integer no fallBackOgImage file path (string) no codeMaxLines integer yes codeLineNumbers boolean yes mainSections array/string no centerLogo boolean no logo file path (string) no mobileNavigation string no figurePositionShow boolean yes figurePositionLabel string no customCSS array of file path (string) no customJS array of file path (string) no enforceLightMode boolean N/A enforceDarkMode boolean N/A titleSeparator string no comment boolean no Page Parameters These options can be set from a page frontmatter or via archetypes.\nParameter Value Type Overrides Global title string N/A date date N/A description string N/A draft boolean N/A featured boolean N/A tags array/string N/A categories array/string N/A toc boolean N/A thumbnail file path (string) N/A featureImage file path (string) N/A shareImage file path (string) N/A codeMaxLines integer yes codeLineNumbers boolean yes figurePositionShow boolean yes figurePositionLabel string no comment boolean no Modify links menu To add, remove, or reorganize top menu items, edit this YAML file. These menu items also display any categories (taxonomies) that might be configured for articles.\nSocial media To edit your social media profile links, edit this YAML file.\nIf you wish to globally use a large Twitter summary card when sharing posts, set the global parameter largeTwitterCard to true.\nSearch engine If using Google Analytics, configure the ga_analytics global parameter in your site with your ID.\nForcing light or dark mode By default, sites authored using Clarity will load in the browser with the user's system-wide settings. I.e., if the underlying OS is set to dark mode, the site will automatically load in dark mode. Regardless of the default mode, a UI control switch exists to override the theme mode at the user's discretion.\nIn order to override this behavior and force one mode or another, add either enforceLightMode or enforceDarkMode to your config.toml file. If neither value is present, add it.\nTo enforce Light Mode by default, turn enforceLightMode to true.\nTo enforce Dark Mode by default, turn enforceDarkMode to true\n1[params] 2... 3enforceLightMode = true # Force the site to always load in light mode. 4... Please note that you cannot enforce both modes at the same time. It wouldn't make sense, would it?\nPlease also note that the mode toggle UI will remain in place. That way, if a user prefers dark mode, they can have their way. The best of both worlds.\nI18N This theme supports Multilingual (i18n / internationalization / translations)\nThe exampleSite gives you some examples already. You may extend the multilingual functionality by following the official documentation.\nThings to consider in multilingual:\nsupported languages are configured in config/_default/languages.toml add new language support by creating a new file inside i18n directory. Check for missing translations using hugo server --i18n-warnings taxonomy names (tags, categories, etc...) are translated in i18n as well (translate the key) menus are translated manually in the config files config/_default/menus/menu.xx.toml menu's languages list are semi-hardcoded. You may chose another text for the menu entry with languageMenuName. Please, do better and create a PR for that. content must be translated individually. Read the official documentation for information on how to do it. Note: if you do NOT want any translations (thus removing the translations menu entry), then you must not have any translations. In the exampleSite that's as easy as removing the extra translations from the config/_default/... or executing this onliner:\n1sed \u0026#39;/^\\[pt]$/,$d\u0026#39; -i config/_default/languages.toml \u0026amp;\u0026amp; rm config/_default/menus/menu.pt.toml Comments Clarity supports Hugo built-in Disqus partial, you can enable Disqus simply by setting disqusShortname in your configuration file.\ndisqusShortname should be placed in root level of configuration.\nYou can also create a file named layouts/partials/comments.html for customizing the comments, checkout Comments Alternatives for details.\n","link":"https://omnigram.nexptr.com/zh/docs/overview/customize/","section":"docs","title":"Customization"},{"body":"Images Image figure captions You have the option of adding captions to images in blog posts and automatically prepending a desired string such as \u0026quot;Figure N\u0026quot; to the alt text. This is controlled via two global settings.\nfigurePositionLabel is a string which will be prepended to any alt text of an article image. By default, this is set to \u0026quot;Figure.\u0026quot; And figurePositionShow controls, globally, whether to show this label. It does not affect whether to show the image alt text, only the prefix figure caption. For more granular control, figurePositionShow can be overridden at the article level if desired.\nThe number will be automatically calculated and assigned after the figurePositionLabel text starting from the top of the article and counting down. Featured images will be excluded from this figuration.\nImage figure captions example In this example, figurePositionLabel is set to \u0026quot;Figure\u0026quot; in config.toml and this is the first image in a given article.\n1![Antrea Kubernetes nodes prepared](./images/calrity/image-figure.png) Inline images To make a blog image inline, append :inline to its alt text. Typically, inline images will have no alt text associated with them.\nInline images example 1\u0026lt;!-- some image without alt text --\u0026gt; 2![:inline](someImageUrl) 3 4\u0026lt;!-- some image with alt text --\u0026gt; 5 6![some alt text:inline](someOtherImageUrl) Float images to the left To align a blog image to the left, append :left to its alt text. Article text will then flow to the right of the image.\nFloat images left example 1\u0026lt;!-- some image without alt text --\u0026gt; 2![:left](someImageUrl) 3 4\u0026lt;!-- some image with alt text --\u0026gt; 5 6![some alt text:left](someOtherImageUrl) Add classes to images To add a class image to the left, append ::\u0026lt;classname\u0026gt; to its alt text. You can also add multiple classes to an image separated by space. ::\u0026lt;classname1\u0026gt; \u0026lt;classname2\u0026gt;.\nImage class example 1\u0026lt;!-- some image without alt text --\u0026gt; 2![::img-medium](someImageUrl) 3 4\u0026lt;!-- some image with alt text --\u0026gt; 5 6![some alt text::img-large img-shadow](someOtherImageUrl) Article thumbnail image Blog articles can specify a thumbnail image which will be displayed to the left of the card on the home page. Thumbnails should be square (height:width ratio of 1:1) and a suggested dimension of 150 x 150 pixels. They will be specified using a frontmatter variable as follows:\n1... 2thumbnail: \u0026#34;images/2020-04/capv-overview/thumbnail.jpg\u0026#34; 3... The thumbnail image will take precedence on opengraph share tags if the shareImage parameter is not specified.\nArticle featured image Each article can specify an image that appears at the top of the content. When sharing the blog article on social media, if a thumnail is not specified, the featured image will be used as a fallback on opengraph share tags.\n1... 2featureImage: \u0026#34;images/2020-04/capv-overview/featured.jpg\u0026#34; 3... Share Image Sometimes, you want to explicitly set the image that will be used in the preview when you share an article on social media. You can do so in the front matter.\n1... 2shareImage = \u0026#34;images/theImageToBeUsedOnShare.png\u0026#34; 3... Note that if a share image is not specified, the order of precedence that will be used to determine which image applies is thumbnail =\u0026gt; featureImage =\u0026gt; fallbackOgImage. When sharing a link to the home page address of the site (as opposed to a specific article), the fallbackOgImage will be used.\nAlign logo You can left align or center your site's logo.\n1... 2centerLogo = true # Change to false to align left 3... If no logo is specified, the title of the site will appear in its place.\n","link":"https://omnigram.nexptr.com/zh/docs/overview/images/","section":"docs","title":"Manipulating Images"},{"body":"Blog directory Edit the config.toml file and change the blogDir key. Value will be name of the folder where the blog articles reside.\n1[params] 2... 3blogDir = \u0026#34;blog\u0026#34; 4... For more info, see the Hugo docs.\nMobile menu positioning The navigation menu when mobile browsing can be configured in config.toml to open right or left depending on preference. The \u0026quot;hamburger\u0026quot; menu icon will always display in the upper right hand corner regardless.\n1[params] 2... 3mobileNavigation = \u0026#34;left\u0026#34; # Mobile nav menu will open to the left of the screen. 4... Tags and Taxonomies Show number of tags The number of tags and taxonomies (including categories) that should be shown can be configured so that any more than this value will only be accessible when clicking the All Tags button. This is to ensure a large number of tags or categories can be easily managed without consuming excess screen real estate. Edit the numberOfTagsShown parameter and set accordingly.\n1[params] 2... 3numberOfTagsShown = 14 # Applies for all other default \u0026amp; custom taxonomies. e.g categories, brands see https://gohugo.io/content-management/taxonomies#what-is-a-taxonomy 4... Number of tags example Table of contents Each article can optionally have a table of contents (TOC) generated for it based on top-level links. By configuring the toc parameter in the article frontmatter and setting it to true, a TOC will be generated only for that article. The TOC will then render under the featured image.\nTable of contents (TOC) example ","link":"https://omnigram.nexptr.com/zh/docs/overview/blogging/","section":"docs","title":"Blogging"},{"body":"软件依赖 Docker 硬件依赖 系统： 类Unix系统（Ubuntu,Debian,Centos,MacOS 等等）[最佳],Windows; 内存： 最少1GB，推荐4G以上 CPU： 最少2核心，推荐4核以上 GPU： 如果需要使用本地化的AI听书功能和AI辅助阅读vRAM 8G以上 ","link":"https://omnigram.nexptr.com/zh/docs/install/requirements/","section":"docs","title":"环境依赖"},{"body":"Code Display line numbers Choose whether to display line numbers within a code block globally with the parameter codeLineNumbers setting to true or false.\n1[params] 2... 3codeLineNumbers = true # Shows line numbers for all code blocks globally. 4... Limit code block height You can globally control the number of lines which are displayed by default for your code blocks. Code which has the number of lines exceed this value will dynamically cause two code block expansion buttons to appear, allowing the user to expand to full length and contract. This is useful when sharing code or scripts with tens or hundreds of lines where you wish to control how many are displayed. Under params in config.toml file, add a value as follows:\n1[params] 2... 3codeMaxLines = 10 # Maximum number of lines to be shown by default across all articles. 4... If the value already exists, change it to the desired number. This will apply globally.\nIf you need more granular control, this parameter can be overridden at the blog article level. Add the same value to your article frontmatter as follows:\n1... 2codeMaxLines = 15 # Maximum number of lines to be shown in code blocks in this blog post. 3... If codeMaxLines is specified both in config.toml and in the article frontmatter, the value specified in the article frontmatter will apply to the given article. In the above example, the global default is 10 and yet the article value is 15 so code blocks in this article will auto-collapse after 15 lines.\nIf codeMaxLines is not specified anywhere, an internal default value of 100 will be assumed.\n","link":"https://omnigram.nexptr.com/zh/docs/overview/syntax-highlighting/","section":"docs","title":"Syntax Highlighting"},{"body":"Custom CSS and JS To minimize HTTP requests per page, we would recommend loading CSS styles and JavaScript helpers in single bundles. That is to say, one CSS file and one JavaScript file. Using Hugo minify functions, these files will be minified to optimize the size.\nGoing by the above 👆🏻 reason, we recommend adding custom CSS and JS via the custom SASS file (Compose, Clarity) and the custom JS file (Compose, Clarity).\nHowever, sometimes you may need to load additional style or script files. In such cases, you can add custom .css and .js files by listing them in the config.toml file (see the snippet below). Similar to images, these paths should be relative to the static directory.\n1[params] 2... 3customCSS = [\u0026#34;css/custom.css\u0026#34;] # Include custom CSS files 4customJS = [\u0026#34;js/custom.js\u0026#34;] # Include custom JS files 5... Pro Tip: You can change the theme colors via the this variable's SASS file\nHooks Clarity provides some hooks for adding code on page.\nIf you need to add some code(CSS import, HTML meta or similar) to the head section on every page, add a partial to your project:\nlayouts/partials/hooks/head-end.html Similar, if you want to add some code right before the body end, create your own version of the following file:\nlayouts/partials/hooks/body-end.html ","link":"https://omnigram.nexptr.com/zh/docs/overview/theme-overrides/","section":"docs","title":"Theme Overrides"},{"body":"Omnigram Server 是「读享」的后端服务。提供用户管理，书架管理，AI文字转语音等功能支持。其结构如下图所示：\n本章节主要介绍少Omnigram Server 部署相关依赖和方法.\n环境依赖 ","link":"https://omnigram.nexptr.com/zh/docs/install/","section":"docs","title":"部署"},{"body":"Hugo Clarity is a technology-minded theme for Hugo based on VMware's open-source Clarity Design System featuring rich code support, dark/light mode, mobile support, and much more. See a live demo at neonmirrors.net.\nGet started with Clarity ","link":"https://omnigram.nexptr.com/zh/docs/features/","section":"docs","title":"功能"},{"body":"Welcome to the Compose theme user guide! This guide shows you how to get started creating technical documentation sites using Compose, including site customization and how to use Compose's blocks and templates.\nGet started now ","link":"https://omnigram.nexptr.com/zh/docs/administration/","section":"docs","title":"管理"},{"body":"Hugo Clarity is a technology-minded theme for Hugo based on VMware's open-source Clarity Design System featuring rich code support, dark/light mode, mobile support, and much more. See a live demo at neonmirrors.net.\nGet started with Clarity ","link":"https://omnigram.nexptr.com/zh/docs/developer/","section":"docs","title":"开发"},{"body":"Hugo Clarity is a technology-minded theme for Hugo based on VMware's open-source Clarity Design System featuring rich code support, dark/light mode, mobile support, and much more. See a live demo at neonmirrors.net.\nGet started with Clarity ","link":"https://omnigram.nexptr.com/zh/docs/guides/","section":"docs","title":"指引"},{"body":"Hugo Clarity is a technology-minded theme for Hugo based on VMware's open-source Clarity Design System featuring rich code support, dark/light mode, mobile support, and much more. See a live demo at neonmirrors.net.\nGet started with Clarity ","link":"https://omnigram.nexptr.com/zh/docs/faq/","section":"docs","title":"FAQ"},{"body":"隐私政策 更新日期：2023/12/19\n生效日期：2023/12/19\n导言 读享 是一款由 Sven Liu （以下简称“我们”）提供的产品。 您在使用我们的服务时，我们可能会收集和使用您的相关信息。我们希望通过本《隐私政策》向您说明，在使用我们的服务时，我们如何收集、使用、储存和分享这些信息，以及我们为您提供的访问、更新、控制和保护这些信息的方式。 本《隐私政策》与您所使用的 读享 服务息息相关，希望您仔细阅读，在需要时，按照本《隐私政策》的指引，作出您认为适当的选择。本《隐私政策》中涉及的相关技术词汇，我们尽量以简明扼要的表述，并提供进一步说明的链接，以便您的理解。\n您使用或继续使用我们的服务，即意味着同意我们按照本《隐私政策》收集、使用、储存和分享您的相关信息。\n如对本《隐私政策》或相关事宜有任何问题，请通过 omnigram@nexptr.com 与我们联系。\n1. 我们收集的信息 我们或我们的第三方合作伙伴提供服务时，可能会收集、储存和使用下列与您有关的信息。如果您不提供相关信息，可能无法注册成为我们的用户或无法享受我们提供的某些服务，或者无法达到相关服务拟达到的效果。\n日志信息，指您使用我们的服务时，系统可能通过 cookies、标识符及相关技术收集的信息，包括您的设备信息、浏览信息、点击信息，并将该等信息储存为日志信息，为您提供个性化的用户体验、保障服务安全。您可以通过浏览器设置拒绝或管理 cookie、标识符或相关技术的使用。 我们接入的第三方 SDK：\nhttps://pub.dev/packages/just_audio 2. 信息的存储 2.1 信息存储的方式和期限\n我们会通过安全的方式存储您的信息，包括本地存储（例如利用 APP 进行数据缓存）、数据库和服务器日志。 一般情况下，我们只会在为实现服务目的所必需的时间内或法律法规规定的条件下存储您的个人信息。 2.2 信息存储的地域\n我们会按照法律法规规定，将境内收集的用户个人信息存储于中国境内。 目前我们不会跨境传输或存储您的个人信息。将来如需跨境传输或存储的，我们会向您告知信息出境的目的、接收方、安全保证措施和安全风险，并征得您的同意。 2.3 产品或服务停止运营时的通知\n当我们的产品或服务发生停止运营的情况时，我们将以推送通知、公告等形式通知您，并在合理期限内删除您的个人信息或进行匿名化处理，法律法规另有规定的除外。 3. 信息安全 我们使用各种安全技术和程序，以防信息的丢失、不当使用、未经授权阅览或披露。例如，在某些服务中，我们将利用加密技术（例如 SSL）来保护您提供的个人信息。但请您理解，由于技术的限制以及可能存在的各种恶意手段，在互联网行业，即便竭尽所能加强安全措施，也不可能始终保证信息百分之百的安全。您需要了解，您接入我们的服务所用的系统和通讯网络，有可能因我们可控范围外的因素而出现问题。\n4. 我们如何使用信息 我们可能将在向您提供服务的过程之中所收集的信息用作下列用途：\n向您提供服务； 在我们提供服务时，用于身份验证、客户服务、安全防范、诈骗监测、存档和备份用途，确保我们向您提供的产品和服务的安全性； 帮助我们设计新服务，改善我们现有服务； 使我们更加了解您如何接入和使用我们的服务，从而针对性地回应您的个性化需求，例如语言设定、位置设定、个性化的帮助服务和指示，或对您和其他用户作出其他方面的回应； 向您提供与您更加相关的广告以替代普遍投放的广告； 评估我们服务中的广告和其他促销及推广活动的效果，并加以改善； 软件认证或管理软件升级； 让您参与有关我们产品和服务的调查。 5. 信息共享 目前，我们不会主动共享或转让您的个人信息至第三方，如存在其他共享或转让您的个人信息或您需要我们将您的个人信息共享或转让至第三方情形时，我们会直接或确认第三方征得您对上述行为的明示同意。\n为了投放广告，评估、优化广告投放效果等目的，我们需要向广告主及其代理商等第三方合作伙伴共享您的部分数据，要求其严格遵守我们关于数据隐私保护的措施与要求，包括但不限于根据数据保护协议、承诺书及相关数据处理政策进行处理，避免识别出个人身份，保障隐私安全。\n我们不会向合作伙伴分享可用于识别您个人身份的信息（例如您的姓名或电子邮件地址），除非您明确授权。\n我们不会对外公开披露所收集的个人信息，如必须公开披露时，我们会向您告知此次公开披露的目的、披露信息的类型及可能涉及的敏感信息，并征得您的明示同意。\n随着我们业务的持续发展，我们有可能进行合并、收购、资产转让等交易，我们将告知您相关情形，按照法律法规及不低于本《隐私政策》所要求的标准继续保护或要求新的控制者继续保护您的个人信息。\n另外，根据相关法律法规及国家标准，以下情形中，我们可能会共享、转让、公开披露个人信息无需事先征得您的授权同意：\n与国家安全、国防安全直接相关的； 与公共安全、公共卫生、重大公共利益直接相关的； 犯罪侦查、起诉、审判和判决执行等直接相关的； 出于维护个人信息主体或其他个人的生命、财产等重大合法权益但又很难得到本人同意的； 个人信息主体自行向社会公众公开个人信息的； 从合法公开披露的信息中收集个人信息的，如合法的新闻报道、政府信息公开等渠道。 6. 您的权利 在您使用我们的服务期间，我们可能会视产品具体情况为您提供相应的操作设置，以便您可以查询、删除、更正或撤回您的相关个人信息，您可参考相应的具体指引进行操作。此外，我们还设置了投诉举报渠道，您的意见将会得到及时的处理。如果您无法通过上述途径和方式行使您的个人信息主体权利，您可以通过本《隐私政策》中提供的联系方式提出您的请求，我们会按照法律法规的规定予以反馈。\n7. 变更 我们可能适时修订本《隐私政策》的条款。当变更发生时，我们会在版本更新时向您提示新的《隐私政策》，并向您说明生效日期。请您仔细阅读变更后的《隐私政策》内容，若您继续使用我们的服务，即表示您同意我们按照更新后的《隐私政策》处理您的个人信息。\n8. 未成年人保护 我们鼓励父母或监护人指导未满十八岁的未成年人使用我们的服务。我们建议未成年人鼓励他们的父母或监护人阅读本《隐私政策》，并建议未成年人在提交的个人信息之前寻求父母或监护人的同意和指导。\n","link":"https://omnigram.nexptr.com/zh/privacy_policy/","section":"","title":"隐私政策"},{"body":"用户协议 Sven Liu（以下简称“我们”）依据本协议为用户（以下简称“你”）提供读享服务。本协议对你和我们均具有法律约束力。\n一、本服务的功能 你可以使用本服务 Epub 阅读，听书。\n二、责任范围及限制 你使用本服务得到的结果仅供参考，实际情况以官方为准。\n三、隐私保护 我们重视对你隐私的保护，你的个人隐私信息将根据《隐私政策》受到保护与规范，详情请参阅《隐私政策》。\n四、其他条款 4.1 本协议所有条款的标题仅为阅读方便，本身并无实际涵义，不能作为本协议涵义解释的依据。\n4.2 本协议条款无论因何种原因部分无效或不可执行，其余条款仍有效，对双方具有约束力。\n","link":"https://omnigram.nexptr.com/zh/terms_conditions/","section":"","title":""},{"body":"","link":"https://omnigram.nexptr.com/zh/blog/","section":"blog","title":"Blog"},{"body":"","link":"https://omnigram.nexptr.com/zh/categories/","section":"categories","title":"Categories"},{"body":"","link":"https://omnigram.nexptr.com/zh/docs/","section":"docs","title":"Docs"},{"body":" Compose your Docs with Ease. Compose is a lean Hugo documentation theme, inspired by forestry.io.\nFeel free to open a PR, raise an issue(s) or request new feature(s). You can generate diagrams, flowcharts, and piecharts from text in a similar manner as markdown using mermaid.\nOr, generate graphs, charts and tables from a csv, or a json file.\nRead the Docs Download Theme\n","link":"https://omnigram.nexptr.com/zh/","section":"","title":"Omnigram"},{"body":"","link":"https://omnigram.nexptr.com/zh/tags/","section":"tags","title":"Tags"}]